##################### ПРОЕКТ ИГРЫ КРЕСТИКИ-НОЛИКИ ######################################################################

##################### СОЗДАНИЕ ИГРОВОГО ПОЛЯ ###########################################################################

board = list(range(1,10)) #создаем переменную со списком, в котором 9 элементов

def draw_board(): #создаем функцию
    print ('-------------') #печатаем верхнюю границу игры
    for i in range(3): #в цикле перебираем весь список
#при значение i равном 0 выведем 1-ю строку и так от 0 до 2
#в квадратных скобках формула, для взятия значений из списка
#при проходе 1м циклом, i равен 0, прибавляем 1,2,3 и получаем 1,2,3
#при проходе 2м циклом, i равен 1, прибавляем 1,2,3 и получаем 4,5,6
#при проходе 3м циклом, i равен 2, прибавляем 1,2,3 и получаем 7,8,9
        print ('|', board[0 + i * 3], '|', board[1 + i * 3], '|', board[2 + i * 3], '|')
        print ('-------------') #выводим на экран подчёркивание после каждой строки
draw_board() #запускаем функцию, чтобы увидеть начальное игровое поле игры

################### ВОПРОСЫ ПОЛЬЗОВАТЕЛЯМ О ВЫБОРЕ СИМВОЛА ДЛЯ ИГРЫ ####################################################

u1_quest_symb = input('Type what symbol will play User 1 - (X or 0) ? :')  # получаем строку от пользователя

while u1_quest_symb != 'X' or u1_quest_symb != 'x' or u1_quest_symb != 0:  # цикл: пока ответ не равен: X или 0

    if u1_quest_symb.lower() == 'x':  # применяем метод lower, чтобы не устанавливать условием заглавную и прописную буквы
        print('User 1 choose X symbol')  # при выборе х появляется сообщение
        print('User 2 will play with 0 symbol')
        break

    elif u1_quest_symb == '0':  # при выборе 0 появляется сообщение
        print('User 1 choose 0 symbol')
        print('User 2 will play with X symbol')
        break
    else:  # пока пользователь не введет Х, x или 0
        u1_quest_symb = input('Type what symbol will play User 1 X or 0?:')

u2_symb = ''  # создаем пустую строку для Пользователя 2
if u1_quest_symb == 'X' or u1_quest_symb == 'x':  # если Пользователь 1 выбрал Х, то Пользователь 2 будет играть нулем
    u2_symb = '0'
else:
    u2_symb = 'X'  # если Пользователь 1 выбрал 0, то Пользователь 2 будет играть Х


################### ФУНКЦИЯ ДЛЯ ОПРЕДЕЛЕНИЯ ПОЗИЦИИ ИГРОКА И ЗАВЕРШЕНИИ ИГРЫ ##########################

def position_finding():
    count = 0 #создаем переменную-счетчик

    while count <= 9: #пока переменная-счетчик не дойдет до 9, будет выполняться следующее условие
        u1_pos_quest = int(input (f'Type position for your symbol, User 1: ')) #просим пользователя 1 ввести позицию
        board.remove (u1_pos_quest) #удаляем элемент с цифрой, вместо которого поставим символ пользователя 1
        board.insert(u1_pos_quest-1, u1_quest_symb) #ставим на место позиции символ пользователя 1
        count += 1 # добавляем к переменной единицу после каждого хода игрока
        draw_board()#выводим на экран игровое поле
        print(count) #для контроля работы цикла выводим на экран значение переменной-счтчика
        if count < 9: #создаем дополнительное условие второго цикла для второго игрока
            u2_pos_quest = int(input (f'Type position for your symbol, User 2: ')) #просим пользователя 2 ввести позицию
            board.remove (u2_pos_quest) #удаляем элемент с цифрой, вместо которого поставим символ пользователя 2
            board.insert(u2_pos_quest-1, u2_symb) #ставим на место позиции символ пользователя 2
            draw_board()#выводим на экран игровое поле
            count += 1  # добавляем к переменной единицу после каждого хода игрока
            print(count) #для контроля работы цикла выводим на экран значение переменной-счетчика
        else:
            print ('Game over') #после завершения цикла выводим на экран сообщение, что игра завершена
position_finding()


#################################### ФУНКЦИЯ, ОПРЕДЕЛЯЮЩАЯ ПОБЕДИТЕЛЯ ##################################################

def winner():
    if board[0] == board[1] == board[2] or board[3] == board[4] == board[5] or board[6] == board[7] == board[
        8]:  # если горизонтальные ячейки равны
        print(f'user with symbol {board[0]} win! (first condition)')
        play_again()

    elif board[0] == board[3] == board[6] or board[1] == board[4] == board[7] or board[2] == board[5] == board[
        8]:  # если вертикальные ячейки равны
        print(f'user with symbol {board[0]} win! (second condition)')
        play_again()

    elif board[0] == board[4] == board[8] or board[2] == board[4] == board[6]:  # если крест-накрест ячейки равны
        print(f'user with symbol {board[0]} win! (third condition)')
        play_again()


winner()